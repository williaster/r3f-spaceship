import type { NextPage } from 'next';
import Head from 'next/head';
import { Canvas, useFrame } from '@react-three/fiber';
import * as THREE from 'three';
import { PerspectiveCamera, OrbitControls, useHelper } from '@react-three/drei';
import styles from '../styles/r3f.module.css';
import React, { useRef, useState } from 'react';

const ThreeDConcepts: NextPage = () => {
  const [showAmbient, setShowAmbient] = useState(true);
  const [showPoint, setShowPoint] = useState(true);
  const [showBoxes, setShowBoxes] = useState(false);
  const [showMaterials, setShowMaterials] = useState(true);
  return (
    <div className={styles.container}>
      <Head>
        <title>3D basics</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h3>A 3D Scene ðŸ•¶</h3>

        <ul>
          <li>Cartesian 3D space</li>
          <li>Perspective Camera (position, near/far)</li>
          <li>
            Lights
            <ul>
              <li>
                Ambient (global illumination)
                <input
                  type="checkbox"
                  checked={showAmbient}
                  onChange={() => setShowAmbient(!showAmbient)}
                />
              </li>
              <li>Directional (single direction, parallel rays)</li>
              <li>
                Point (single point, all directions){' '}
                <input
                  type="checkbox"
                  checked={showPoint}
                  onChange={() => setShowPoint(!showPoint)}
                />
              </li>
              <li>Spotlight (single point, single directional cone)</li>
            </ul>
          </li>
          <li>
            Objects{' '}
            <input
              type="checkbox"
              checked={showBoxes}
              onChange={() => setShowBoxes(!showBoxes)}
            />
            <ul>
              <li>Mesh (points and edges)</li>
              <li>
                Materials (color, shiny/rough, texture){' '}
                <input
                  type="checkbox"
                  checked={showMaterials}
                  onChange={() => setShowMaterials(!showMaterials)}
                />
              </li>
            </ul>
          </li>
        </ul>
        <Scene
          showAmbient={showAmbient}
          showBoxes={showBoxes}
          showPoint={showPoint}
          showMaterials={showMaterials}
        />
      </main>
    </div>
  );
};

const Box = ({
  rotation = 0.01,
  wireframe,
  ...props
}: Partial<JSX.IntrinsicElements['mesh']> & {
  rotation?: number;
  wireframe?: boolean;
}) => {
  // This reference gives us direct access to the THREE.Mesh object
  const ref = useRef<THREE.mesh>();

  // Hold state for hovered and clicked events
  const [hovered, hover] = useState(false);
  const [clicked, click] = useState(false);

  // Subscribe this component to the render-loop, rotate the mesh every frame
  useFrame(() => {
    if (ref.current) ref.current.rotation.x += rotation;
  });

  // Return the view, these are regular Threejs elements expressed in JSX
  return (
    <mesh
      {...props}
      ref={ref}
      scale={(props.scale ?? 1) * (clicked ? 1.5 : 1)}
      onClick={() => click(!clicked)}
      onPointerOver={() => hover(true)}
      onPointerOut={() => hover(false)}
    >
      <boxGeometry args={[1, 1, 1]} />
      <meshStandardMaterial
        wireframe={wireframe}
        color={wireframe ? '#000' : hovered ? 'hotpink' : 'orange'}
      />
    </mesh>
  );
};

const Plane = ({
  wireframe,
  ...props
}: Partial<JSX.IntrinsicElements['mesh']> & { wireframe?: boolean }) => (
  <mesh {...props} position={[0, 0, -0.01]}>
    <planeGeometry args={[40, 20, 10, 10]} />
    <meshStandardMaterial
      wireframe={wireframe}
      color="#333"
      side={THREE.DoubleSide}
    />
  </mesh>
);

const Scene = ({
  showAmbient = true,
  showPoint = true,
  showBoxes = true,
  showMaterials = true,
}) => (
  <Canvas style={{ background: '#eee', height: 600 }}>
    <OrbitControls />
    <axesHelper />
    {showAmbient && <ambientLight />}
    {showPoint && <pointLight position={[10, 10, 10]} />}
    {showBoxes && (
      <>
        <Box
          wireframe={!showMaterials}
          position={[-1.2, 0, 1]}
          rotation={-0.01}
        />
        <Box wireframe={!showMaterials} position={[1.2, 0, 1]} />
        <Box wireframe scale={1.05} position={[1.2, 0, 1]} />
      </>
    )}
    <Plane wireframe={!showMaterials} rotation={[0, Math.PI, 0]} />
  </Canvas>
);

export default ThreeDConcepts;
